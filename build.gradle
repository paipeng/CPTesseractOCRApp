plugins {
  id 'application'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'org.javamodularity.moduleplugin' version "1.8.12"
  id 'org.beryx.jlink' version '2.26.0'
}


group 'com.paipeng.cptesseractocrapp'
version '1.0.0'
description = "The Application is for OCR decoding."


repositories {
    mavenCentral()
}

javafx {
    version = "17"
    modules = [
            'javafx.controls',
            'javafx.fxml'
    ]
}

sourceCompatibility = '17'
targetCompatibility = '17'


javadoc {
    options.addStringOption('encoding', 'UTF-8')
}
compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


mainClassName = "com.paipeng.cptesseractocrapp.MainApp"


dependencies {
    // https://mvnrepository.com/artifact/net.sourceforge.tess4j/tess4j
    implementation (group: 'net.sourceforge.tess4j', name: 'tess4j', version: '5.10.0') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }

    // https://mvnrepository.com/artifact/net.java.dev.jna/jna
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.14.0'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.4.14'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.14'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.12'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.12'


    // https://mvnrepository.com/artifact/org.controlsfx/controlsfx
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.2.0'

    testImplementation group: 'junit', name: 'junit', version: '4.13.1'
    // https://mvnrepository.com/artifact/org.testfx/testfx-core
    testImplementation group: 'org.testfx', name: 'testfx-core', version: '4.0.17'
    testImplementation group: 'org.testfx', name: 'testfx-junit', version: '4.0.17'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.10.0'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.0'
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

project.configurations.implementation.setCanBeResolved(true)

task fatJar(type: Jar) {
    println "my fatjar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class' : 'com.paipeng.cptesseractocrapp.MainApp',
                'Class-Path': configurations.implementation.collect {"$it.name"}.join(' ')
    }

    /*
    into('lib') {
        from 'libs'
    }

     */

    baseName = project.name + '-all'
    from {
        configurations.implementation.collect {
            if (!it.toString().contains("sources") && !it.toString().contains("junit") && !it.toString().contains("ant") && !it.toString().contains("rt.jar") ) {
                println it.getName()
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }

    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'LICENSE.txt'
    with jar
}

application {
    mainClass = mainClassName
    mainModule = 'com.paipeng.cptesseractocrapp'
}

run {
    //jvmArgs = ['-Djdk.gtk.version=2']
    jvmArgs = ['-Djdk.gtk.version=2',
               '--add-exports', 'javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED',
               '--add-exports', 'javafx.graphics/com.sun.javafx.font=ALL-UNNAMED']
}

// Runtime for non-modular projects
jlink {

    println "JavaHome: " + System.getProperty("java.home")
    setJavaHome("/opt/jdk-17.0.2.jdk/Contents/Home")
    // Some default options
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    // '--add-exports javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED', '--add-exports javafx.graphics/com.sun.javafx.font=ALL-UNNAMED'

    launcher{
        name = 'CP-OCR'
        noConsole = true
    }

    mergedModule {
        additive = true
        //requires "ch.qos.logback.classic"
        forceMerge("slf4j")
    }

    // Pack it!
    jpackage {
        println 'jpackage'
        // Could be taken from command line, here it is defined statically
        // project.findProperty('installerOs')
        //    (example: -PinstallerOs=mac)
        targetPlatformName = System.getProperty('os.name').toLowerCase().split()[0]
        println 'targetPlatformName: ' + targetPlatformName
        // The app name
        imageName = 'CP-OCR'
        jvmArgs = ['-Djdk.gtk.version=2',
                   //'--add-exports', 'javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED',
                   //'--add-exports', 'javafx.graphics/com.sun.javafx.font=ALL-UNNAMED',
                   //'--add-exports=ch.qos.logback.classic/ch.qos.logback.classic.model.processor=ch.qos.logback.core',
                   //'--add-modules=javafx.controls,javafx.swing,javafx.media,javafx.graphics,javafx.fxml'
        ]
        // Resource directory for native package overrides,
        // you can do lots of magic here too...
        resourceDir = file('package/')
        if (targetPlatformName == 'mac') {
            targetPlatform("mac") {
                // Use downloaded Bellsoft Liberica JDK with JavaFX bundled!
                jdkHome = '/opt/jdk-17.0.2.jdk/Contents/Home'
            }
            installerType = 'pkg'
        }
        if (targetPlatformName == 'windows') {
            targetPlatform("win") {
                jdkHome = 'E:/jdk-17.0.6'
            }
            installerType = 'exe'
        }
        if (targetPlatformName == 'linux') {
            targetPlatform("linux") {
            }
            installerType = 'deb'
        }
        // Add jpackage-specific options
        installerOptions = [
                '--name', 'CP-OCR', // installer name
                '--description', project.description,
                '--copyright', 'Copyright 2024 PaiPeng',
                '--vendor', 'PaiPeng'
        ]
        // We also could take the installer type from comand line
        // installerType = project.findProperty('installerType')
        // We would pass this from the command line
        //    (example: -PinstallerType=msi)
        if (installerType == 'pkg') {
            println 'pkg'
            imageOptions += ['--icon', 'src/main/resources/icon.icns']
            installerOptions += [
                    '--license-file', 'package/LICENSE-OS-Installer.txt'
            ]
        }
        if (installerType == 'exe') {
            imageOptions += ['--icon', 'src/main/resources/icon.ico']
            installerOptions += [
                    '--win-per-user-install', // Install only for current user
                    '--win-console', // Shows what Java outputs to the console
                    '--win-dir-chooser',
                    '--win-menu', '--win-shortcut'
            ]
        }
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'src/main/resources/icon.png']
            installerOptions += [
                    '--linux-menu-group', 'Utility',
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', 'sipaipv6@gmail.com'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                    '--linux-rpm-license-type', 'GPLv3'
            ]
        }
        println imageOptions
        println installerOptions
    }
}


/**
 * Hook for obfuscating. Configures installDist to
 * depend on obfuscate.
 */

tasks.installDist {
    //dependsOn("proguard")
    //dependsOn("copyJar")
    //proguard.finalizedBy copyJar
}

jpackage {
    // Could be used for pre-checks;
    // e.g., are certain command line arguments defined?
    doFirst {
        // project.findProperty('installerOs')
        //    (example: -PinstallerOs=mac)
        // project.getProperty('installerType') // throws exception if its missing
    }
}

configurations {
    testCompile
}
test {
    useJUnitPlatform {
        excludeTags 'DatabaseTest', 'FetcherTest', 'GUITest'
    }

    testLogging {
        // set options for log level LIFECYCLE
        // for debugging tests: add "STANDARD_OUT", "STANDARD_ERROR"
        events = ["FAILED"]
        exceptionFormat "full"
    }
}