plugins {
  id 'application'
  id 'org.openjfx.javafxplugin' version '0.0.9'
  id 'org.beryx.jlink' version '2.12.0'
}

repositories {
    mavenCentral()
}

javafx {
    version = "17"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

mainClassName = "com.paipeng.cptesseractocrapp.MainApp"
dependencies {
    // https://mvnrepository.com/artifact/net.sourceforge.tess4j/tess4j
    implementation (group: 'net.sourceforge.tess4j', name: 'tess4j', version: '5.10.0') {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    // https://mvnrepository.com/artifact/net.java.dev.jna/jna
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.14.0'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-core
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.4.14'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.14'

    // https://mvnrepository.com/artifact/org.controlsfx/controlsfx
    implementation group: 'org.controlsfx', name: 'controlsfx', version: '11.2.0'

    testImplementation group: 'junit', name: 'junit', version: '4.13.1'
    // https://mvnrepository.com/artifact/org.testfx/testfx-core
    testImplementation group: 'org.testfx', name: 'testfx-core', version: '4.0.17'
    testImplementation group: 'org.testfx', name: 'testfx-junit', version: '4.0.17'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.10.0'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.0'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    //implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.11'
    //implementation group: 'org.slf4j', name: 'slf4j-simple', version: '2.0.11'
    // https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
}
jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'hellofx'
    }
}

task createProperties(dependsOn: processResources) {
    doLast {
        new File("$buildDir/resources/main/version.properties").withWriter { w ->
            Properties p = new Properties()
            p['version'] = project.version.toString()
            p.store w, null
        }
    }
}

classes {
    dependsOn createProperties
}

project.configurations.implementation.setCanBeResolved(true)
task fatJar(type: Jar) {
    println "my fatjar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class' : 'com.paipeng.cptesseractocrapp.MainApp',
                'Class-Path': configurations.implementation.collect {"$it.name"}.join(' ')
    }

    /*
    into('lib') {
        from 'libs'
    }

     */

    baseName = project.name + '-all'
    from {
        configurations.implementation.collect {
            if (!it.toString().contains("sources") && !it.toString().contains("junit") && !it.toString().contains("ant") && !it.toString().contains("rt.jar") ) {
                println it.getName()
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }

    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'LICENSE.txt'
    with jar
}


configurations {
    testCompile
}
test {
    useJUnitPlatform {
        excludeTags 'DatabaseTest', 'FetcherTest', 'GUITest'
    }

    testLogging {
        // set options for log level LIFECYCLE
        // for debugging tests: add "STANDARD_OUT", "STANDARD_ERROR"
        events = ["FAILED"]
        exceptionFormat "full"
    }
}